#!/usr/bin/env python3

import datetime
import json
import random
import sys

import pytz

sys.path.append(".")

from fakes import fake  # noqa: E402

#
fake_unique = fake.unique


def main(filename: str, count: int):
    with open(filename, "r") as f:
        schema = json.load(f)

    properties = schema["properties"]
    items = []
    for _ in range(count):
        items.append(generate_row(properties))

    print(json.dumps(items, indent=2))


def generate_row(properties: dict[str, dict]):
    """
    Generate a row of data based on the given schema properties.

    For string type properties:
    - If the property has a faker function name set in the `faker` key, use it.
    - Otherwise, try to use the field name as the faker function name.

    For integer type properties:
    - If the property has a minimum and maximum set, generate a random integer
      between the minimum and maximum.

    For number type properties:
    - If the property has a minimum and maximum set, generate a random number
      between the minimum and maximum.
    - If the property has a precision set, generate a random number with the
      precision.

    :param properties: The properties of the schema.
    :return: A row of data.
    """
    item = {}
    for field_name, props in properties.items():
        fmt = props.get("format")
        field_type = props["type"]

        # If the field has no enum, try to match to a fake function.
        fake_func = None
        faker_args = None
        if "enum" not in props:
            fake_func_name = props.get("faker")
            faker_args = props.get("faker_args")
            faker = fake

            if fake_func_name is not None:
                # If the fake function name starts with "unique.", use the
                # unique faker function.
                if fake_func_name.startswith("unique."):
                    fake_func_name = fake_func_name.replace("unique.", "")
                    faker = fake_unique

                # Get the faker function for specific faker function name.
                fake_func = getattr(faker, fake_func_name, None)
            else:
                # Get faker function for the field.
                fake_func = getattr(faker, field_name, None)

        # If the field has a fake function, use it.
        if fake_func is not None:
            # If the faker function has arguments, pass them.
            if faker_args is not None:
                value = fake_func(faker_args)
            else:
                value = fake_func()

            # If the value is a datetime, convert it to a string.
            if isinstance(value, (datetime.date, datetime.datetime)):
                value = value.isoformat()

        # If the type is a string, we need to generate a value based on the
        # format.
        elif field_type == "string":
            # If the format is a known format, we can use the faker library to
            # generate a value.
            match fmt:
                case "birthdate":
                    value = fake.date_of_birth(
                        minimum_age=18, maximum_age=100
                    ).isoformat()
                case "date":
                    value = fake.date().isoformat()
                case "date-time":
                    value = fake.date_time(tzinfo=pytz.UTC).isoformat(
                        timespec="seconds"
                    )
                case "email":
                    value = fake.email()
                case "uuid":
                    value = fake.uuid4()
                case _:
                    # Pick a random value from the enum if it exists.
                    if props.get("enum") is not None:
                        value = random.choice(props["enum"])
                    else:
                        value = fake.word()
        elif field_type == "integer":
            value = fake.random_int(min=props["minimum"], max=props["maximum"])
        elif field_type == "number":
            value = round(
                random.uniform(props["minimum"], props["maximum"]), props["precision"]
            )

        item[field_name] = value

    row = {"data": item}
    return row


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: generate <filename> <count>")
        sys.exit(1)

    main(sys.argv[1], int(sys.argv[2]))
